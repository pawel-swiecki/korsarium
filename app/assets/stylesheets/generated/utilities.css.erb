<%
  # Dynamically load all design token files
  token_dir = Rails.root.join('config/design_tokens')
  tokens = {}
 
  # Load each YAML file in the directory
  Dir[token_dir.join('*.yml')].sort.each do |file|
    token_name = File.basename(file, '.yml')
    begin
      tokens[token_name] = YAML.load_file(file)
    rescue => e
      Rails.logger.error "Failed to load design token file #{file}: #{e.message}"
      tokens[token_name] = {}
    end
  end
 
  # Helper method to calculate fluid clamp values (replicating clamp-generator.js)
  def fluid_clamp(min, max, viewport_min = 330, viewport_max = 1230)
    root_size = 16.0
 
    # If min equals max, return a simple rem value
    if min == max
      return "#{(min / root_size).round(3)}rem"
    end

    # Convert to rem
    min_rem = min / root_size
    max_rem = max / root_size

    # Convert viewport to rem
    vw_min_rem = viewport_min / root_size
    vw_max_rem = viewport_max / root_size

    # Calculate slope and intersection
    slope = (max_rem - min_rem) / (vw_max_rem - vw_min_rem)
    intersection = (-1 * vw_min_rem * slope) + min_rem

    # Match the original's formatting with toFixed(2)
    "clamp(#{min_rem.round(3)}rem, #{intersection.round(2)}rem + #{(slope * 100).round(2)}vw, #{max_rem.round(3)}rem)"
  end

  # Extract specific token types (with safety checks)
  colors = tokens['colors'] || {}
  fonts = tokens['fonts'] || {}
  spacing = tokens['spacing'] || {}
  text_sizes = tokens['text_sizes'] || {}
  text_leading = tokens['text_leading'] || {}
  text_weights = tokens['text_weights'] || {}
  viewports = tokens['viewports'] || {}

  # Safely get items or empty hash
  color_items = colors['items'] || {}
  font_items = fonts['items'] || {}
  spacing_items = spacing['items'] || {}
  text_size_items = text_sizes['items'] || {}
  text_leading_items = text_leading['items'] || {}
  text_weight_items = text_weights['items'] || {}

  # Viewports are structured differently (no 'items' key)
  viewport_min = viewports['min'] || 330
  viewport_mid = viewports['mid'] || 760
  viewport_max = viewports['max'] || 1230
%>

/* ============================================ */
/*  Auto-generated CSS from design tokens      */
/*  Generated at: <%= Time.current %>          */
/*  Token files loaded: <%= tokens.keys.sort.join(', ') %>  */
/* ============================================ */

/* CSS Custom Properties */
:root {
  <% if color_items.any? %>
    /* Colors */
    <% color_items.each do |name, value| %>
    --color-<%= name.parameterize %>: <%= value %>;
    <% end %>
  <% end %>

  <% if font_items.any? %>
    /* Font Family */
    <% font_items.each do |name, value| %>
    --font-<%= name.parameterize %>: <%= value.is_a?(Array) ? value.join(', ') : value %>;
    <% end %>
  <% end %>

  <% if spacing_items.any? %>
    /* Spacing (fluid) */
    <% spacing_items.each do |name, sizes| %>
      <% if sizes.is_a?(Hash) && sizes['min'] && sizes['max'] %>
      --space-<%= name.parameterize %>: <%= fluid_clamp(sizes['min'], sizes['max'], viewport_min, viewport_max) %>;
      <% end %>
    <% end %>
  <% end %>

  <% if text_size_items.any? %>
    /* Text Sizes (fluid) */
    <% text_size_items.each do |name, sizes| %>
      <% if sizes.is_a?(Hash) && sizes['min'] && sizes['max'] %>
      --size-<%= name.parameterize %>: <%= fluid_clamp(sizes['min'], sizes['max'], viewport_min, viewport_max) %>;
      <% end %>
    <% end %>
  <% end %>

  <% if text_leading_items.any? %>
    /* Text Leading */
    <% text_leading_items.each do |name, value| %>
    --leading-<%= name.parameterize %>: <%= value %>;
    <% end %>
  <% end %>

  <% if text_weight_items.any? %>
    /* Text Weights */
    <% text_weight_items.each do |name, value| %>
    --font-weight-<%= name.parameterize %>: <%= value %>;
    <% end %>
  <% end %>
}

/* ============================================ */
/*  Breakpoint Reference Values                */
/*  CUBE CSS uses fluid sizing, but these      */
/*  are available for exceptions when needed   */
/* ============================================ */

/* Viewport breakpoints for reference */
/* sm: >= <%= viewport_min %>px */
/* md: >= <%= viewport_mid %>px */  
/* lg: >= <%= viewport_max %>px */

/*
 * CUBE CSS Philosophy: Instead of using breakpoints,
 * prefer fluid typography (clamp), flexible layouts
 * (Grid, Flexbox), and logical properties that adapt
 * naturally to their containers.
 *
 * Example usage if breakpoints are absolutely needed:
 * @media (min-width: <%= viewport_min %>px) { ... }
 * @media (min-width: <%= viewport_mid %>px) { ... }
 * @media (min-width: <%= viewport_max %>px) { ... }
*/

/* ============================================ */
/*  Utility Classes                             */
/* ============================================ */

<% if color_items.any? %>
  /* Color Utilities */
  <% color_items.each do |name, value| %>
  .text-<%= name.parameterize %> {
    color: var(--color-<%= name.parameterize %>);
  }

  .bg-<%= name.parameterize %> {
    background-color: var(--color-<%= name.parameterize %>);
  }

  .border-<%= name.parameterize %> {
    border-color: var(--color-<%= name.parameterize %>);
  }
  <% end %>
<% end %>

<% if spacing_items.any? %>
  /* Spacing Utilities for CUBE CSS patterns */
  <% spacing_items.each do |name, sizes| %>
    <% if sizes.is_a?(Hash) %>
    .flow-space-<%= name.parameterize %> {
      --flow-space: var(--space-<%= name.parameterize %>);
    }

    .region-space-<%= name.parameterize %> {
      --region-space: var(--space-<%= name.parameterize %>);
    }

    .gutter-<%= name.parameterize %> {
      --gutter: var(--space-<%= name.parameterize %>);
    }
    <% end %>
  <% end %>
<% end %>

<% if text_weight_items.any? %>
  /* Font Weight Utilities */
  <% text_weight_items.each do |name, value| %>
  .font-<%= name.parameterize %> {
    font-weight: var(--font-weight-<%= name.parameterize %>);
  }
  <% end %>
<% end %>

<% if text_leading_items.any? %>
  /* Text Leading Utilities */
  <% text_leading_items.each do |name, value| %>
  .leading-<%= name.parameterize %> {
    line-height: var(--leading-<%= name.parameterize %>);
  }
  <% end %>
<% end %>
